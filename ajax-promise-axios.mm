{"objectClass":"NSDictionary","root":{"objectClass":"MindNode","ID":"842T7","rootPoint":{"objectClass":"CGPoint","x":360,"y":1795.25},"lineColorHex":"#BBBBBB","children":{"0":{"objectClass":"MindNode","ID":"A7WCE","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"UIQ7J","lineColorHex":"#DC306C","text":"简介：\n1. Promise使Js中进行异步编程的新解决方案。\n2. Promise是一个构造函数\n3. Promise对象用来封装一个异步操作可以获得成功或者失败的结果值。"},"1":{"objectClass":"MindNode","ID":"MA6Y4","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"I1PXX","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"4D82N","lineColorHex":"#DC306C","text":"Promise的作用：\n可以将异步操作以同步的操作流程表达出来，then将在当前脚本所有同步任务执行完才会执行"},"1":{"objectClass":"MindNode","ID":"95K77","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"6EFI0","lineColorHex":"#DC306C","text":"promise的状态：\n生成的实例对象中一个属性 promisestate\n就表示的是promise的状态。"},"objectClass":"NSArray"},"text":"promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve 和reject 。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。\n\nresolve 函数的作用是，将 Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；reject函数的作用是，将 Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。\n\nPromise 实例生成以后，可以用 then方法分别指定resolved状态和 rejected状态的回调函数。"},"2":{"objectClass":"MindNode","ID":"619K6","lineColorHex":"#DC306C","text":"resolve和reject传递参数：\nresolve（参数） reject（参数）reject中的参数可以代表错误信息。\n\n在then（）方法中两个函数参数，第一个是成功时调用可以接受value，第二个是失败时调用接受reason。"},"3":{"objectClass":"MindNode","ID":"9K2YA","lineColorHex":"#DC306C","text":"promise对象的值\n实例对象中的另一个属性 PromiseResult\n保存着异步任务成功或者失败的结果\n当异步任务成功时，调用resolve（参数）传递的参数就是PromiseResult。\n\nthen方法执行完返回的对象是一个新的promise对象。"},"objectClass":"NSArray"},"text":"Promise的原理：\n所谓 Promise ，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。\n\npromise对象有两个特点（1）对象的状态不受外界影响，有三种状态pending、fulfilled、rejected。只有异步操作的结果可以决定是哪个状态。（2）状态一旦改变就不会再变了。"},"1":{"objectClass":"MindNode","ID":"P1ULL","lineColorHex":"#DC306C","text":"使用promise封装异步操作在一个函数中，并返回promise对象。然后再将这个函数向外暴露给其他模块，这样就可以在其他模块中使用这个由Promise封装起来的异步操作，比如读文件、ajax请求等等."},"2":{"objectClass":"MindNode","ID":"R1K6K","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"9SBNO","lineColorHex":"#DC306C","text":"Promise构造函数：new Promise(excutor){}\n1. executor函数：执行器 （resolve，reject）=>{}\n2. resolve 函数 内部异步任务成功时调用\n3. reject 函数 内部异步任务失败时调用\nexecuto会在promise内部立即同步调用，异步操作在执行器中执行，这样就是异步任务同步执行了。"},"1":{"objectClass":"MindNode","ID":"NT273","lineColorHex":"#DC306C","text":"Promise.prototytpe.then:\n1.onResolved 成功的回调函数 （value）=>\n2, onRejected 失败的回调函数 (reason)=>\n用于得到一个新的promise对象\n"},"2":{"objectClass":"MindNode","ID":"6V3PC","lineColorHex":"#DC306C","text":"promise.prototytpe.catch (onRejected)=>{}\n失败时的回调函数，如果异步任务失败，可以执行catch输出失败原因。"},"objectClass":"NSArray"},"text":"Promise实例对象的Api"},"3":{"objectClass":"MindNode","ID":"2D4RH","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"J8V9R","lineColorHex":"#DC306C","text":"Promise.resolve和Promise.reject\n1. promise.resolve（）\n如果传入的参数为非promise对象，则返回的结果为成功的promise对象。如果传入的参数为promise对象，则参数的结果也就是传入的promise对象内封装的异步任务的结果，决定了resolve的结果。\n\n2. promise.reject()\n不管传什么，结果都是一个状态为失败的promise对象。"},"1":{"objectClass":"MindNode","ID":"51T53","lineColorHex":"#DC306C","text":"promise.all():\n参数是包含n个promise数组，只有所有的promise全都成功新的promise状态才为resolve，否则为reject。"},"2":{"objectClass":"MindNode","ID":"77WK6","lineColorHex":"#DC306C","text":"promise.race():\n参数也是n个promise数组，第一个完成的promise的状态就是返回的新promise 的状态。"},"objectClass":"NSArray"},"text":"Promise的Api（返回Promise对象"},"objectClass":"NSArray"},"text":"为什么使用Promise：\n 支持链式调用，可以解决回调地狱问题\n回调地狱是回调函数嵌套调用。"},"2":{"objectClass":"MindNode","ID":"7O7E8","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"Y3YC5","lineColorHex":"#DC306C","text":"1.如何改变promise对象的状态\n一、resolve（value）：如果当前是pending就会变为resolved。\n二、reject（reason）：如果当前是pending就会变为rejected。\n三、抛出异常“如果当前是pending就会变为rejected。"},"1":{"objectClass":"MindNode","ID":"7UEF1","lineColorHex":"#DC306C","text":"2.一个promise指定多个成功或者失败回调函数，都会调用嘛：\n当promise的状态改变都会调用。"},"2":{"objectClass":"MindNode","ID":"I9476","lineColorHex":"#DC306C","text":"3.改变promise对象状态和指定回调函数谁先谁后？\n\n（1）都有可能\n（2）先改变状态再指定回调：\n在执行器中直接调用resolve和rejected，同步。\n或者延迟更长时间才调用then（）\n（3）什么时候才能得到数据\n状态发生改变时才能得到数据！"},"3":{"objectClass":"MindNode","ID":"43OJH","lineColorHex":"#DC306C","text":"4.then方法返回的新promise对象状态由什么决定：\n由then（）指定的回调函数执行的结果决定 。如果抛出异常，新promise变为rejected，reason为抛出的异常。如果返回的是非promise对象的任意值，返回的promise对象变为resolved，value为返回值。"},"objectClass":"NSArray"},"text":"promise的几个关键问题"},"objectClass":"NSArray"},"text":"Promise"},"1":{"objectClass":"MindNode","ID":"CJR5P","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"6SU1N","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"9DOCU","lineColorHex":"#BF58F5","text":"具体查看文档和案例"},"objectClass":"NSArray"},"text":"axios的基本使用"},"1":{"objectClass":"MindNode","ID":"9KIY4","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"Y933O","lineColorHex":"#BF58F5","text":"1.config\n保存着请求路径、请求方法、请求头等信息"},"1":{"objectClass":"MindNode","ID":"VP312","lineColorHex":"#BF58F5","text":"2. data：\n是响应体的内容"},"2":{"objectClass":"MindNode","ID":"1G8Y7","lineColorHex":"#BF58F5","text":"3. headers\n响应头信息"},"3":{"objectClass":"MindNode","ID":"7JNHR","lineColorHex":"#BF58F5","text":"3.request\n是ajax原生request请求的对象"},"objectClass":"NSArray"},"text":"响应结果的解构"},"2":{"objectClass":"MindNode","ID":"E4GXF","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"23T41","lineColorHex":"#BF58F5","text":"详细配置\n具体查看文档"},"1":{"objectClass":"MindNode","ID":"5J407","lineColorHex":"#BF58F5","text":"默认配置\n查看文档 axios.defaults.method"},"objectClass":"NSArray"},"text":"axios的配置"},"3":{"objectClass":"MindNode","ID":"79W3P","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"3EJ38","lineColorHex":"#BF58F5","text":"通过axios.create({\n     配置\n})来创建实例对象，对象的功能与axios很像。\n在需要向多个路径发送请求时，可以使用这个。"},"objectClass":"NSArray"},"text":"axios实例对象"},"objectClass":"NSArray"},"text":"axios"},"objectClass":"NSArray"},"text":"Ajax、Promise、axios"},"ID":"HC7YF","style":100}