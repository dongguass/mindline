{"objectClass":"NSDictionary","root":{"objectClass":"MindNode","ID":"USP13","rootPoint":{"objectClass":"CGPoint","x":360,"y":10171.25},"lineColorHex":"#BBBBBB","children":{"0":{"objectClass":"MindNode","ID":"8153G","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"PJ63N","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"4Z10L","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"I8EX7","lineColorHex":"#DC306C","text":"<block'quote>标签块级引用，独占一行，<q>也是引用，但是是内联行。"},"objectClass":"NSArray"},"text":"<b>粗体文本、<em>定义着重文字、<i>斜体文字、<small>定义小号字、<pre> 标签可以保留您需要的文本格式，比如不会取消换行和空格，并且所示文本是等宽的"},"objectClass":"NSArray"},"text":"HTML文本格式化标签"},"1":{"objectClass":"MindNode","ID":"JC7M4","lineColorHex":"#DC306C","text":"超链接标签"},"2":{"objectClass":"MindNode","ID":"6K4EY","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"KMQWT","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"U8I4A","lineColorHex":"#DC306C","text":"常用属性\nname 指定数据的名称\ncontent 指定数据的内容\ncharset 指定网页的字符集\n\n数据的名称可以写keywords表示关键字"},"objectClass":"NSArray"},"text":"元数据（metadat）是关于数据的信息。元数据不会显示在页面上，但是对于机器是可读的。"},"objectClass":"NSArray"},"text":"meta元素"},"3":{"objectClass":"MindNode","ID":"7X060","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"24W62","lineColorHex":"#DC306C","text":"src属性：指定的是外部图片的路径(路径规则和超链接一样)"},"1":{"objectClass":"MindNode","ID":"ZHZ13","lineColorHex":"#DC306C","text":"alt属性：是对图片的描述。这个描述不会莫显示，有些浏览器会在图片无法加载时显式。"},"2":{"objectClass":"MindNode","ID":"293I7","lineColorHex":"#DC306C","text":"图片格式：\n"},"objectClass":"NSArray"},"text":"img元素(属于替换元素)"},"4":{"objectClass":"MindNode","ID":"CMFI7","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"83Y0X","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"76ED2","lineColorHex":"#DC306C","text":"<ol>子元素是<li>"},"objectClass":"NSArray"},"text":"有序列表"},"1":{"objectClass":"MindNode","ID":"NA5U6","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"TVNV5","lineColorHex":"#DC306C","text":"<ul>子元素是<li>"},"objectClass":"NSArray"},"text":"无序列表"},"2":{"objectClass":"MindNode","ID":"2FZMV","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"UDGX2","lineColorHex":"#DC306C","text":"<dl>创建一个定义列表，\n<dt>表示定义的内容，<dd>对内容进行解释说明。"},"objectClass":"NSArray"},"text":"定义列表"},"objectClass":"NSArray"},"text":"列表元素\n\n这三种列表可以互相嵌套，但是必须嵌套再<li>中。"},"5":{"objectClass":"MindNode","ID":"KH5KV","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"6NT65","lineColorHex":"#DC306C","text":"Audio:向页面中引入一个外部的音频文件。默认情况下不允许用户自己控制播放停止。\n\n属性：\n1. controls:是否允许用户控制播放\n2. autoplay：是否允许自动播放\n3. src：文件路径\n"},"1":{"objectClass":"MindNode","ID":"ZUW7S","lineColorHex":"#DC306C","text":"不兼容问题：最好的解决办法\n<audio controls height=\"100\" width=\"100\">\n  <source src=\"horse.mp3\" type=\"audio/mpeg\">\n  <source src=\"horse.ogg\" type=\"audio/ogg\">\n  <embed height=\"50\" width=\"100\" src=\"horse.mp3\">\n</audio>\n下面的例子使用了两个不同的音频格式。HTML5 <audio> 元素会尝试以 mp3 或 ogg 来播放音频。如果失败，代码将回退尝试 <embed> 元素。"},"objectClass":"NSArray"},"text":"音频(Audio)视频(Video)"},"objectClass":"NSArray"},"text":"基础标签(元素)"},"1":{"objectClass":"MindNode","ID":"LJ877","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"963SR","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"ZYSVM","lineColorHex":"#BF58F5","text":"块元素（block element）\n在网页中一般通过块元素进行布局，一般会在块元素中放行内元素，而不会在行内元素放块元素。\np元素不能放任何块元素！"},"1":{"objectClass":"MindNode","ID":"88Q4V","lineColorHex":"#BF58F5","text":"行内元素（inline element）\n行内元素主要用来包裹文字"},"2":{"objectClass":"MindNode","ID":"B6Y65","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"E0EJ1","lineColorHex":"#BF58F5","text":"内联框架：\n<iframe>用于向当前页面引入一个其他页面。"},"objectClass":"NSArray"},"text":"替换元素：\n比如img，img标签写入src属性时，会被外部的图片替换，在页面显式的不是img标签的内容而是外部的内容这就是替换元素。"},"objectClass":"NSArray"},"text":"块盒和行盒（块元素和行内元素）"},"1":{"objectClass":"MindNode","ID":"5T3M6","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"CPQ22","lineColorHex":"#BF58F5","text":"这些都是布局标签：（h5新增）\n<header>表示网页头部\n<main>表示网页主体部分（一个页面只有一个main）\n<footer>表示网页的底部\n<nav>表示网页中的导航\n<aside>定义侧边栏内容\n<article>定义页面独立内容"},"1":{"objectClass":"MindNode","ID":"O9117","lineColorHex":"#BF58F5","text":"主要使用div和span元素，\ndiv是块级 span是行内。"},"objectClass":"NSArray"},"text":"语义化标签：网页中HTML专门负责网页的结构而不是显示的样式。所以在使用HTML标签的时候应该关注的是标签的语义。"},"2":{"objectClass":"MindNode","ID":"42UDY","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"33KWM","lineColorHex":"#BF58F5","text":"相对路径都会使用.或..开头，在服务器内部使用相对路径。\n./表示当前文件所在的目录。\n../表示返回上一级目录。"},"1":{"objectClass":"MindNode","ID":"OU1C2","lineColorHex":"#BF58F5","text":"绝对路径就是服务器外的网址，可以直接使用的。"},"objectClass":"NSArray"},"text":"相对路径与绝对路径"},"objectClass":"NSArray"},"text":"基础规则/语法"},"2":{"objectClass":"MindNode","ID":"94ZXX","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"B7403","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"4I9QD","lineColorHex":"#26BBFF","text":"DOCTYPE元素：\n告诉浏览器两件事情，一处理的是HTML文档二 标记文档内容的HTML所属版本。版本号不用写，浏览器能自动识别。"},"1":{"objectClass":"MindNode","ID":"27P6A","lineColorHex":"#26BBFF","text":"html元素：\n根元素，表示文档HTML部分开始。"},"2":{"objectClass":"MindNode","ID":"AG946","lineColorHex":"#26BBFF","text":"head元素：\n包含文档的元数据，head元素必须包含一个title元素。"},"3":{"objectClass":"MindNode","ID":"Q7WND","lineColorHex":"#26BBFF","text":"body元素：\n文档的内容包装在body元素中。"},"objectClass":"NSArray"},"text":"文档元素"},"1":{"objectClass":"MindNode","ID":"S58U6","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"RE3XV","lineColorHex":"#26BBFF","text":"元数据元素可以用来提供关于HTML文档的信息。它们本身不是文档内容，但提供了关于后面的文档内容的信息。元数据元素应放在head元素中。"},"1":{"objectClass":"MindNode","ID":"4S231","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"I18O4","lineColorHex":"#26BBFF","text":"使用href属性指定基本URL\n此例将基准URL设置为http://titan/listings/。"},"objectClass":"NSArray"},"text":"base元素用来设置一个基准URL，让HTML文档中的相对链接在此基础上进行解析。当文档使用相对路径时，浏览器会把基准URL和相对URL拼接成完整的URL。"},"2":{"objectClass":"MindNode","ID":"HLR16","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"16N6T","lineColorHex":"#26BBFF","text":"一般使用 名/值对定义元数据。\n1. name=applicationname 当前页所属web应用系统的名称。\n2. name= author 当前页作者\n3. description 当前页的说明\n4. generator 用来生产HTML的软件名称\n5. keywords 一批以逗号分开的字符串，描述页面内容。"},"1":{"objectClass":"MindNode","ID":"V385Z","lineColorHex":"#26BBFF","text":"meta元素还可以声明HTML文档内容所用的字符编码。 使用charset属性定义。"},"2":{"objectClass":"MindNode","ID":"D7I8K","lineColorHex":"#26BBFF","text":"还可以改写HTTP标头字段的值。","markType":7},"objectClass":"NSArray"},"text":"meta元素：\n注意每个meta元素只能用于一种用途。如果在这些特性中想要使用的不止一个，那就应该在head元素中添加多个"},"3":{"objectClass":"MindNode","ID":"25W35","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"60GLY","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"U19B4","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"1MSA3","lineColorHex":"#26BBFF","text":"除了AND，还可以使用NOT和表示OR的逗号（,）。藉此可以为应用样式设计出复杂而又相当具体的条件。"},"objectClass":"NSArray"},"text":"3. media属性指定样式使用的媒体。可用来表明文档在什么情况下使用样式。可以进行详细设置。如：<style media= \"screen AND (max-width:500px)\"> 小于五百时使用这个样式。","markType":7},"objectClass":"NSArray"},"text":"style元素：\n1.type属性指定样式类型，值总是text/css，因为浏览器只支持css。\n2. 指定样式作用范围的scopred属性，目前不支持。"},"objectClass":"NSArray"},"text":"定义css样式"},"4":{"objectClass":"MindNode","ID":"E99ZO","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"4DEDP","lineColorHex":"#26BBFF","text":"有六个局部属性：\nhref、hreflang：说明所有资源使用的语言、media：所关联的内容用于那种设备、rel：文档与所关联资源的关系类型、sizes、type：指定所关联MIME类型。"},"objectClass":"NSArray"},"text":"指定外部资源 link元素","markType":7},"objectClass":"NSArray"},"text":"元数据元素说明文档"},"2":{"objectClass":"MindNode","ID":"Q89Q9","lineColorHex":"#26BBFF","text":"script脚本元素和noscript元素"},"objectClass":"NSArray"},"text":"创建HTML文档（文档元素和元数据元素）"},"3":{"objectClass":"MindNode","ID":"56SY4","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"7C518","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"2M21K","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"XMQXJ","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"301CL","lineColorHex":"#37C45A","text":"target属性你可以定义被链接的文档在何处显示（设置 _blank 在新的窗口打开，还是在原有的窗口中打开），_self默认值，在当前页面打开。"},"1":{"objectClass":"MindNode","ID":"4E0XG","lineColorHex":"#37C45A","text":"id属性。id 属性可用于在一个 HTML 文档中创建书签标记。"},"2":{"objectClass":"MindNode","ID":"YC2A8","lineColorHex":"#37C45A","text":"一些其他用法：\n1. href属性值写上# 可以回到当前页面的顶部。\n2. 如果像跳转到页面的某个位置，只需将href的值写为#id,id为目标元素的id属性值。\n3. href的值还可以是 javascript:; 此时点击这个a元素 什么都不会发生。"},"objectClass":"NSArray"},"text":"<a>标签,它有几个属性,可以让我们从一个页面跳转到其他页面，或者是当前页面的其他的位置。<a>标签内可以嵌套任何元素，除了它自身。"},"objectClass":"NSArray"},"text":"1. a元素\n定义了6个局部属性，href、hreflang、media、rel、target、type。"},"1":{"objectClass":"MindNode","ID":"NVO84","lineColorHex":"#37C45A","text":"2. b元素\n用来标记一段文字，并不表示特别的强调或者重要性，表示文章提要中的关键词和产品评论中的产品名称。加粗"},"2":{"objectClass":"MindNode","ID":"S4661","lineColorHex":"#37C45A","text":"3. em元素\nem元素表示对一段文字的强调。这可以用来向读者提供关于句子或段落含义的一种语境。斜体"},"3":{"objectClass":"MindNode","ID":"PHW96","lineColorHex":"#37C45A","text":"4. i元素\n不过这个元素常用的地方包括外文词语、科技术语甚至某人的想法（与言语相区别）。该元素的习惯样式与em元素相同。"},"4":{"objectClass":"MindNode","ID":"L74N6","lineColorHex":"#37C45A","text":"5. s元素\n表示一段文字不再正确或准确，习惯样式在文字上加一条删除线。"},"5":{"objectClass":"MindNode","ID":"U50CP","lineColorHex":"#37C45A","text":"6. strong表示重要的文字\nstrong元素的习惯样式如图8-6所示。这方面它与b元素相同。加粗。"},"6":{"objectClass":"MindNode","ID":"Y1SKH","lineColorHex":"#37C45A","text":"7. u元素\n为文字加一段下划线，突出内容。"},"7":{"objectClass":"MindNode","ID":"K52O7","lineColorHex":"#37C45A","text":"8. small元素\nsmall元素表示小号字体内容（fine print），常用于免责声明和澄清声明。"},"8":{"objectClass":"MindNode","ID":"I06PF","lineColorHex":"#37C45A","text":"9。 sub和sup元素\nsub和sup元素分别用于表示下标和上标。有些语言需要用到上标，而在数学中，一个简单的表达式也会用到上标和下标"},"objectClass":"NSArray"},"text":"基本文字元素标记内容"},"1":{"objectClass":"MindNode","ID":"1XV85","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"3I6E4","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"4HK25","lineColorHex":"#37C45A","text":"自闭和元素<br/>"},"objectClass":"NSArray"},"text":"1. br元素\nbr元素只宜用在换行也是内容的一部分的情况，如代码清单8-12。切勿用它创建段落或别的内容组。那是其他元素的任务。"},"1":{"objectClass":"MindNode","ID":"U0325","lineColorHex":"#37C45A","text":"2. wbr\nwbr元素是HTML5中新增的，用来表示长度超过当前浏览器窗口的内容适合在此换行，究竟换不换行由浏览器决定。"},"objectClass":"NSArray"},"text":"换行\n两个元素控制内容换行，br和wbr元素"},"2":{"objectClass":"MindNode","ID":"6Y97Q","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"8PQUV","lineColorHex":"#37C45A","text":"code、var、samp、kbd元素。"},"objectClass":"NSArray"},"text":"表示输入输出"},"3":{"objectClass":"MindNode","ID":"2OL17","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"G4KSU","lineColorHex":"#37C45A","text":"1. abbr元素\nabbr元素用来表示缩写。其title属性表示的是该缩写代表的完整词语。"},"1":{"objectClass":"MindNode","ID":"EM8I6","lineColorHex":"#37C45A","text":"2. dfn元素\ndfn元素表示定义中的术语，也即在用来解释一个词（或短语）的含义的句子中的词（或短语）。"},"2":{"objectClass":"MindNode","ID":"543FT","lineColorHex":"#37C45A","text":"3. q元素\nq元素表示引自他处的内容。\nq元素的cite属性可以用来指定来源文章的URL"},"3":{"objectClass":"MindNode","ID":"H40J0","lineColorHex":"#37C45A","text":"4. cite元素\ncite元素表示所引用作品（如图书、文章、电影和诗歌）的标题。"},"objectClass":"NSArray"},"text":"使用标题引用、引文、定义和缩写"},"4":{"objectClass":"MindNode","ID":"53V17","lineColorHex":"#37C45A","text":"使用语言元素","markType":6,"summaries":{"0":{"objectClass":"NodeSummary","ID":"DP45D","text":"查看8.7小节","color":"#32CD32","offset":{"objectClass":"CGPoint","x":0,"y":0}},"objectClass":"NSArray"}},"5":{"objectClass":"MindNode","ID":"DP45D","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"TOTN6","lineColorHex":"#37C45A","text":"ins元素和del元素可以分别用来表示文档中添加和删除的文字。cite属性用来指定解释添加或删除相关文字原因的文档的URL。datetime属性则用来设置修改时间。"},"1":{"objectClass":"MindNode","ID":"5SN8E","lineColorHex":"#37C45A","text":"mark元素是HTML5中新增的，用来表示因为与某段上下文相关而被突出显示的一段文字。"},"2":{"objectClass":"MindNode","ID":"YSY61","lineColorHex":"#37C45A","text":"time元素可以用来表示时间或日期"},"objectClass":"NSArray"},"text":"其他文本元素","markType":6},"objectClass":"NSArray"},"text":"文本元素（标记文字）"},"4":{"objectClass":"MindNode","ID":"3G6HS","lineColorHex":"#1BD6E7","children":{"0":{"objectClass":"MindNode","ID":"7C76P","lineColorHex":"#1BD6E7","children":{"0":{"objectClass":"MindNode","ID":"DDL74","lineColorHex":"#1BD6E7","text":"<p><p/>，表示一个段落。如果希望在不换行的情况下进行换行可以使用<br/>标签。"},"objectClass":"NSArray"},"text":"段落标签"},"1":{"objectClass":"MindNode","ID":"BI76L","lineColorHex":"#1BD6E7","text":"div元素：\ndiv元素没有具体的含义。找不到其他恰当的元素可用时可以使用这个元素为内容建立结构并赋予其含义。"},"2":{"objectClass":"MindNode","ID":"XO86A","lineColorHex":"#1BD6E7","text":"使用预先编排好格式的内容：\npre元素，可以改变浏览器处理内容的方式，阻止合并空白字符，让源文档中的格式得以保留"},"3":{"objectClass":"MindNode","ID":"U23G1","lineColorHex":"#1BD6E7","text":"blackquote元素：\n该元素的cite属性可以用来指定所引用的内容的来源。"},"4":{"objectClass":"MindNode","ID":"5BO54","lineColorHex":"#1BD6E7","children":{"0":{"objectClass":"MindNode","ID":"D8844","lineColorHex":"#1BD6E7","text":"HTML5中的习惯样式是一条横贯页面的直线。"},"objectClass":"NSArray"},"text":"添加主题分隔:\nhr元素代表段落级别的主题分隔（paragraph-level thematic break），这又是一个在语义和呈现分离要求驱使下冒出来的奇特术语。"},"5":{"objectClass":"MindNode","ID":"84N4Y","lineColorHex":"#1BD6E7","children":{"0":{"objectClass":"MindNode","ID":"1HL85","lineColorHex":"#1BD6E7","text":"1. 有序列表\nol元素表示有序列表。列表项目用li元素表示.\n局部属性有start:设置的是列表首项编号值 reversed:如果使用了,则采取降序 type: 编号的类型"},"1":{"objectClass":"MindNode","ID":"52495","lineColorHex":"#1BD6E7","text":"2. 无序列表\nul元素表示无序列表。与ol元素一样，ul元素中的列表项用li元素。没有局部属性。"},"2":{"objectClass":"MindNode","ID":"6C447","lineColorHex":"#1BD6E7","text":"3. 说明列表\n定义说明列表要用到三个元素：dl、dt和dd元素。这些元素没有定义局部属性，在HTML5中也没有什么变化。"},"objectClass":"NSArray"},"text":"将内容组织为列表:"},"6":{"objectClass":"MindNode","ID":"76HYB","lineColorHex":"#1BD6E7","text":"使用插图：\n插图用figure元素定义。可以包含一个figcaption元素，后者表示插图的标题。"},"objectClass":"NSArray"},"text":"组织内容"},"5":{"objectClass":"MindNode","ID":"330M8","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"21307","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"Q7VF1","lineColorHex":"#FFC700","text":"h1~h6一共有六级标题。一般只会使用h1到h3 ，都是块级元素。大多数内容最多只需要用到两级或三级标题。"},"objectClass":"NSArray"},"text":"标题标签"},"1":{"objectClass":"MindNode","ID":"4V7WN","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"865EX","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"505BJ","lineColorHex":"#FFC700","text":"hgroup主要用来解决子标题的问题。假设文档中有一段内容，其标题为“Fruits I Like”，还有一个子标题“How I Learned to Love Citrus”。为此需要用到h1和h2元素。"},"objectClass":"NSArray"},"text":"hgroup元素可以用来将几个标题元素作为一个整体处理，以免搅乱HTML文档的大纲。"},"objectClass":"NSArray"},"text":"隐藏子标题"},"2":{"objectClass":"MindNode","ID":"O271Y","lineColorHex":"#FFC700","text":" section元素：\nsection元素通常包含一个或多个段落及一个标题，不过标题并不是必需的。"},"3":{"objectClass":"MindNode","ID":"V8BCK","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"TEX15","lineColorHex":"#FFC700","text":"header元素表示一节的首部。里面可以包含各种适合出现在首部的东西，包括刊头或徽标。在内嵌的元素方面，header元素通常包含一个标题元素或一个hgroup元素，还可以包含该节的导航元素"},"1":{"objectClass":"MindNode","ID":"5TCX7","lineColorHex":"#FFC700","text":"footer元素是header元素的配套元素，表示一节的尾部。footer通常包含着该节的总结信息，还可以包含作者介绍、版权信息、到相关内容的链接、徽标及免责声明等。"},"objectClass":"NSArray"},"text":"添加首部和尾部"},"4":{"objectClass":"MindNode","ID":"LJ96G","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"2XTQF","lineColorHex":"#FFC700","text":"nav元素表示文档中的一个区域，它包含着到其他页面或同一页面的其他部分的链接。显然，并非所有的超链接都要放到nav元素中。该元素的目的是规划出文档的主要导航区域。"},"objectClass":"NSArray"},"text":"添加导航区域"},"5":{"objectClass":"MindNode","ID":"7WL87","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"223BK","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"SQJ24","lineColorHex":"#FFC700","text":"文档的主体分作三大部分。第一部分是一个header元素，它汇总了各条博文信息，为文档其他部分提供了一个锚点。第二部分是末尾那个footer元素，它与header相照应，提供了适合于其余内容的基本信息。新增加的东西在第三部分：article元素。例中的每个article描述了作者喜欢的一件事物。"},"objectClass":"NSArray"},"text":"article元素代表HTML文档中一段独立成篇的内容，从理论上讲，可以独立于页面其余内容发布或使用（例如通过RSS）。"},"objectClass":"NSArray"},"text":"使用article"},"6":{"objectClass":"MindNode","ID":"OX881","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"F9T76","lineColorHex":"#FFC700","text":"aside元素用来表示跟周边内容稍沾一点边的内容，类似于书籍或杂志中的侧栏。其内容与页面其他内容、article或section有点关系，但并非主体内容的一部分。"},"objectClass":"NSArray"},"text":"生成附注栏"},"7":{"objectClass":"MindNode","ID":"E3J42","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"B46V2","lineColorHex":"#FFC700","text":"address元素用来表示文档或article元素的联系信息。"},"objectClass":"NSArray"},"text":"提供联系信息"},"8":{"objectClass":"MindNode","ID":"PRRFR","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"E5NZL","lineColorHex":"#FFC700","text":"details元素在文档中生成一个区域，用户可以展开它以了解关于某主题的更多详情。details元素通常包含一个summary元素，后者的作用是为该详情区域生成一个说明标签或标题。"},"objectClass":"NSArray"},"text":"生成详情区域"},"objectClass":"NSArray"},"text":"文档分节"},"6":{"objectClass":"MindNode","ID":"8TVQX","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"E4W1F","lineColorHex":"#DC306C","text":"1. 生成基本的表格\n每个表格必须有table、tr和td。table表示HTMl文档中的表格，tr表示表格中的行，td时表格中的单元格。浏览器会自动调整所有单元格使它们宽度保持一致。"},"1":{"objectClass":"MindNode","ID":"5ZPV3","lineColorHex":"#DC306C","text":"2. 添加表头单元格\nth元素表示表头的单元格，可以用来区分数据和对数据的说明。可以在一行中混合使用th和td元素，也可以让一行包含清一色的th元素。"},"2":{"objectClass":"MindNode","ID":"L45JE","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"W5N7O","lineColorHex":"#DC306C","text":"tbody元素表示构成表格主体的全体行——不包括表头行和表脚行。"},"1":{"objectClass":"MindNode","ID":"6V2DK","lineColorHex":"#DC306C","text":"thead元素用来标记表格的标题行。"},"2":{"objectClass":"MindNode","ID":"00IP0","lineColorHex":"#DC306C","text":"tfoot元素用来标记组成表脚的行。在HTML5中则可以把tfoot元素放在tbody元素之后或最后一个tr元素之后，这与浏览器显示表格的方式更为一致。"},"objectClass":"NSArray"},"text":"3.为表格添加结构\n可以使用thead、tbody和tfoot元素。这些元素可以用来为表格添加结构。"},"3":{"objectClass":"MindNode","ID":"3EF4V","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"L7E2S","lineColorHex":"#DC306C","text":"为rowspan和colspan设置的值必须是整数。colspan和rowspan属性应该用在要占据的网格左上角那个单元格上。正常情况下位于它所跨越的位置上的td和th元素此时则被省略。"},"objectClass":"NSArray"},"text":"4. 制作不规则表格\n有时需要制作不规则的表格，其中的单元格会跨越几行或几列。这种表格的制作要用到td和th元素的colspan和rowspan属性。"},"4":{"objectClass":"MindNode","ID":"J7VVD","lineColorHex":"#DC306C","text":"5. 把表头和单元格关联起来\ntd和th元素都定义了headers属性，它可以供屏幕阅读器和其他残障辅助技术用来简化对表格的处理。"},"5":{"objectClass":"MindNode","ID":"3UZZ0","lineColorHex":"#DC306C","text":"6. 为表格添加标题\ncaption元素可以用来为表格定义一个标题并将其与表格关联起来。"},"6":{"objectClass":"MindNode","ID":"WSK4E","lineColorHex":"#DC306C","text":"7. 处理列\n","markType":7},"7":{"objectClass":"MindNode","ID":"W28HD","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"NA2QY","lineColorHex":"#DC306C","text":"border属性的值必须设置为1或空字符串（\"\"）。该属性并不控制边框的样式，那是CSS的工作。"},"objectClass":"NSArray"},"text":"8. 设置表格边框\ntable元素定义了border属性。使用这个属性就是告诉浏览器这个表格是用来表示表格式数据而不是用来布置其他元素的。"},"objectClass":"NSArray"},"text":"表格元素"},"7":{"objectClass":"MindNode","ID":"2OG3P","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"WNL2T","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"S2FJ4","lineColorHex":"#BF58F5","text":"1、定义表单\nform告知浏览器处理的是HTML表单，input手机用户输入数据，button元素将用户数据发送给服务器。"},"1":{"objectClass":"MindNode","ID":"B0DI1","lineColorHex":"#BF58F5","text":"2. 查看表单数据\n需要服务器进行输出或者渲染页面。"},"objectClass":"NSArray"},"text":"1.制作基本表单\n制作一个基本的表单需要三个元素：form、input和button元素。"},"1":{"objectClass":"MindNode","ID":"8BE22","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"M3M5M","lineColorHex":"#BF58F5","text":"1. 配置表单的action属性\naction属性说明了提交表单时浏览器应该把从用户收集的数据发送到什么地方。要写一个URL地址。"},"1":{"objectClass":"MindNode","ID":"5982J","lineColorHex":"#BF58F5","text":"2. 配置HTTP方法属性\nmethod属性指定了用来将表单数据发送到服务器的HTTP方法。允许的值有get和post这两个，它们分别对应于HTTP的GET和POST方法。"},"2":{"objectClass":"MindNode","ID":"5CQ53","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"V1PRA","lineColorHex":"#BF58F5","text":"1.application/x-www-form-urlencoded编码\n\n这是默认的编码方式，除了不能用来上传文件到服务器外，它适用于各种类型的表单。\n特殊字符替换成对应的HTML实体。数据项的名称和值以等号（=）分开，各组数据项间则以符号&分开。"},"1":{"objectClass":"MindNode","ID":"1QT88","lineColorHex":"#BF58F5","text":"2. multipart/form-data编码\n它一般只用于需要上传文件到服务器的表单的原因"},"2":{"objectClass":"MindNode","ID":"L8NIE","lineColorHex":"#BF58F5","text":"3. text/plain编码"},"objectClass":"NSArray"},"text":"3. 配置数据编码\nenctype属性指定了浏览器对发送给服务器的数据采用的编码方式。"},"3":{"objectClass":"MindNode","ID":"1WG42","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"7B23N","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"5E721","lineColorHex":"#BF58F5","text":"form元素的autocomplete属性设置的是表单中的input元素默认的行为方式。"},"objectClass":"NSArray"},"text":"autocomplete属性允许的值有两个：on和off。如果不设置这个属性的话，其默认值为on，表示允许浏览器填写表单。\n也就是会出现你填写过的内容，帮你快速补全。"},"objectClass":"NSArray"},"text":"4. 控制表单自动完成功能"},"4":{"objectClass":"MindNode","ID":"2G16G","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"1M15U","lineColorHex":"#BF58F5","text":"默认情况下浏览器会用提交表单后服务器反馈的信息替换表单所在的原页面。这可以用form元素的target属性予以改变。"},"objectClass":"NSArray"},"text":"5. 指定表单反馈信息的目标显示位置"},"5":{"objectClass":"MindNode","ID":"OY575","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"JMK0M","lineColorHex":"#BF58F5","text":"提交表单时其name属性值不会被发送给服务器，所以该属性的用处仅限于DOM中。\ninput元素不设置name属性是不会发送给服务器的，因为name属性会作为对象的属性名。"},"objectClass":"NSArray"},"text":"6. 设置表单名称"},"objectClass":"NSArray"},"text":"2. 配置表单"},"2":{"objectClass":"MindNode","ID":"881LG","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"75MQL","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"34055","lineColorHex":"#BF58F5","text":"将表单元素中的id属性值，与label元素的for属性绑定，即可将label元素与表单元素关联起来。"},"objectClass":"NSArray"},"text":"1. label元素\n只用input属性，表单明显缺乏给用户看的指示信息。label元素用途是为表单中每一个元素提供说明。"},"objectClass":"NSArray"},"text":"3. 在表单中添加说明标签"},"3":{"objectClass":"MindNode","ID":"13F7Y","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"88794","lineColorHex":"#BF58F5","text":"autofocus属性，自动聚焦于某个input属性。\nautofocus属性只能用在一个input元素上。要是有几个元素都设置了这个属性，那么浏览器将会自动聚焦于其中的最后一个元素。\n"},"objectClass":"NSArray"},"text":"4. 自动聚焦到某个input元素"},"4":{"objectClass":"MindNode","ID":"JV91M","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"22U1N","lineColorHex":"#BF58F5","text":"要禁用input元素，需要设置其disable属性。"},"objectClass":"NSArray"},"text":"5. 禁用单个input元素"},"5":{"objectClass":"MindNode","ID":"77O1K","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"6L3K7","lineColorHex":"#BF58F5","text":"fieldset元素\n对于更复杂的表单，有时需要将一些元素组织在一起。为此可以使用fieldset元素。"},"1":{"objectClass":"MindNode","ID":"8BN54","lineColorHex":"#BF58F5","text":"为fieldset元素添加说明标签\n在每一个fieldset元素中添加一个legend元素即可弥补没有向用户提供关于这个分组的说明。\n\nlegend必须是fieldset元素的第一个子元素。"},"2":{"objectClass":"MindNode","ID":"83R1Y","lineColorHex":"#BF58F5","text":"给fieldset元素 设置disable属性，可以禁用整租属性。"},"objectClass":"NSArray"},"text":"6. 对表单元素编组"},"6":{"objectClass":"MindNode","ID":"PH8N5","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"6QU5N","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"X12KU","lineColorHex":"#BF58F5","text":"1.用button元素提交表单\ntype属性为submit是默认属性值，当type为submit时，有额外的属性可用。\nformaction：覆盖form元素的action属性\nformenctypoe、formmethod、formtarget、formnovalidate。都是覆盖from元素的属性。"},"1":{"objectClass":"MindNode","ID":"NKE64","lineColorHex":"#BF58F5","text":"2. 用button元素重置表单\ntype属性设置为reset，那么按下按钮会将表单中所有input元素重置为初始状态。"},"2":{"objectClass":"MindNode","ID":"HC83U","lineColorHex":"#BF58F5","text":"3. 把button作为一般元素使用\n这样使用该元素看起来似乎没有什么意义。但在第30章将会讲到，在按下按钮时可以用JavaScript执行一些操作。"},"objectClass":"NSArray"},"text":"该元素有三种用法，通过type属性来设置，这三个值为：\nsubmit，表示按钮提交表单\nreset：表示按钮重置表单\nbutton：表示按钮没有具体语义"},"objectClass":"NSArray"},"text":"7. 使用button元素"},"7":{"objectClass":"MindNode","ID":"AO8S0","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"HM6F3","lineColorHex":"#BF58F5","text":"其他与表单相关的元素都定义了一个form属性，该属性正是用于这个目的。要将某个这类元素与并非其祖先元素的form元素挂钩，只消将其form属性设置为相关form元素的id属性值即可。"},"objectClass":"NSArray"},"text":"6. 使用表单外的元素"},"objectClass":"NSArray"},"text":"表单"},"8":{"objectClass":"MindNode","ID":"PK5YF","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"5PUZJ","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"OD0W6","lineColorHex":"#26BBFF","text":"1. 设定元素大小\n有两个属性能够对文本框的大小产生影响。maxlength属性设定了用户能够输入的字符的最大数目，size属性则设定了文本框能够显示的字符数目。"},"1":{"objectClass":"MindNode","ID":"9UF4P","lineColorHex":"#26BBFF","text":"2. 设置初始值和占位式提示\n设计者可以用value属性设置一个默认值，还可以用placeholder属性设置一段提示文字，告诉用户应该输入什么类型的数据。"},"2":{"objectClass":"MindNode","ID":"T8TR4","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"1S7XP","lineColorHex":"#26BBFF","text":"使用这种text型input元素时要注意：如果某个option元素的内容或label值与其value值不同，那么用户可能会搞不懂为什么点击Lovely Apples结果却是在文本框中输入Apples。"},"objectClass":"NSArray"},"text":"3. 使用数据列表\n可以将input元素的list属性设置为一个datalist元素的id属性值，这样用户在文本框中输入数据时只需从后一元素提供的一批选项中进行选择就行了。"},"3":{"objectClass":"MindNode","ID":"N5Z7O","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"717PW","lineColorHex":"#26BBFF","text":"注意，设置了disabled属性的input元素的数据没有被提交到服务器。如果既要用这个属性又想把数据发到服务器，那么应该考虑使用hidden型input元素（参见13.6节）。"},"objectClass":"NSArray"},"text":"4. 生成只读或被禁用的文本框\nreadonly和disabled属性都可以用来生成用户不能编辑的文本框，其结果的外观不同。"},"objectClass":"NSArray"},"text":"1. 用input元素输入文字\ntype属性设置为text的input元素在浏览器中显示为一个单行文本框。type设置为text属性值可以使用一些额外属性。","maxWidthLine":310},"1":{"objectClass":"MindNode","ID":"35ED1","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"O44DH","lineColorHex":"#26BBFF","text":"设置为password属性后可使用的额外属性\npattern 用于输入验证的正则表达式\nrequired 用户必须输入一个值\nmaxlength、placeholder、size、value与上一样。"},"objectClass":"NSArray"},"text":"2. 用input元素输入密码\ntype属性值设置为password的input元素用于输入密码。用户输入的字符在这种文本框中显示为星号（*）之类的掩饰字符。"},"2":{"objectClass":"MindNode","ID":"Y22WQ","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"LP1L5","lineColorHex":"#26BBFF","text":"submit型input元素可用的额外属性与button元素的同名属性用法相同。"},"objectClass":"NSArray"},"text":"3. 用input生成按钮\n将input元素的type属性设置为submit、reset和button会生成类似button元素（参见第12章）那样的按钮。"},"3":{"objectClass":"MindNode","ID":"W9TKO","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"M7591","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"74JOS","lineColorHex":"#26BBFF","text":"一些额外的属性：\nmin 可接受的最小值\nmax 可接受的最大值\nstep 指定上下调节数值的步长"},"objectClass":"NSArray"},"text":"1. 用input元素获取数值\ntype属性设置为number的input元素生成的输入框只接受数值。有些浏览器（如Chrome）还会在旁边显示用来上调和下调数值的箭头形小按钮。"},"1":{"objectClass":"MindNode","ID":"XDEQ7","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"88JC1","lineColorHex":"#26BBFF","text":"range型input元素支持的属性与number型相同。"},"objectClass":"NSArray"},"text":"2， 用input元素获取指定范围内的数值\n获取数值的另一种办法是使用range型input元素。用户只能用它从事先规定的范围内选择一个数值。"},"2":{"objectClass":"MindNode","ID":"W8124","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"3931O","lineColorHex":"#26BBFF","text":"额外属性：\nchecked 设置了该属性的复选框会是勾选状态\nrequired 必须勾选\nvalue 设定复选框勾选状态时提交给服务器的数据值 默认为on"},"objectClass":"NSArray"},"text":"3. 用input元素获取布尔型输入\ncheckbox型input元素会生成供用户选择是或否的复选框。"},"3":{"objectClass":"MindNode","ID":"DQD7K","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"6231Q","lineColorHex":"#26BBFF","text":"同chekbox一样的额外属性。要生成一组互斥的选项，只消将所有相关input元素的name属性设置为同一个值即可。"},"objectClass":"NSArray"},"text":"4. 用input元素生成一组固定选项\nradio型input元素可以用来生成一组单选按钮，供用户从一批固定的选项中作出选择。它适合于可用有效数据不多的情况。"},"4":{"objectClass":"MindNode","ID":"F1YV2","lineColorHex":"#26BBFF","text":"5. 用input元素获取有规定格式的字符串\ntype属性设置为email、tel和url的input元素能接受的输入数据分别为有效的电子邮箱地址、电话号码和URL。"},"5":{"objectClass":"MindNode","ID":"88M5K","lineColorHex":"#26BBFF","text":"6. 用input获取时间和日期\ntype属性值：\ndatetime：获取世界日期和时间，包括时区信息。\ndatetime-local：获取本地日期和时间\ndate 获取本地日期\nmonth 获取年月信息\ntime 获取时间\nweek 获取当前星期"},"6":{"objectClass":"MindNode","ID":"G6570","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"166Q5","lineColorHex":"#26BBFF","text":"这种input元素中的颜色值以7个字符的格式表示：以#开头，接下来是三个两位十六进制数，它们分别代表红、绿、蓝三种原色的值（如#FF1234）。CSS中的颜色名（如red和black）不能用在这里。"},"objectClass":"NSArray"},"text":"7. 用input元素获取颜色值\ncolor型input元素只能用来选择颜色。这种类型的input元素还支持13.1.3节讲过的list属性。"},"objectClass":"NSArray"},"text":"4. input元素为输入数据把关\ninput元素的type属性在HTML5中新增的一些值可以对用户输入的数据类型提出更具体的要求。"},"4":{"objectClass":"MindNode","ID":"M1B3K","lineColorHex":"#26BBFF","text":"5. 用input 元素获取搜索用词\nsearch型input元素会生成一个单行文本框，供用户输入搜索用词。它实际上什么事都不做。这类input元素支持的额外属性与text型input元素相同。"},"5":{"objectClass":"MindNode","ID":"C7W10","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"W342N","lineColorHex":"#26BBFF","text":"hidden型input元素可以用来达到这个目的。"},"objectClass":"NSArray"},"text":"6. 用input元素生成隐藏的数据项\n有时设计者会希望使用一些用户看不到或不能编辑的数据项，但又要求提交表单时也能将其发送给服务器。"},"6":{"objectClass":"MindNode","ID":"BJHG0","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"737O8","lineColorHex":"#26BBFF","text":"image型input元素生成的按钮显示为一幅图像，点击它可以提交表单。\n点击图像按钮会导致浏览器提交表单。在发送的数据中包括来自那个image型input元素的两个数据项，它们分别代表用户点击位置相对于图像左上角的x坐标和y坐标。"},"objectClass":"NSArray"},"text":"7. input元素生成图像按钮和分区响应图"},"7":{"objectClass":"MindNode","ID":"5OWWK","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"W26NF","lineColorHex":"#26BBFF","text":"额外属性：\naccept 指定接受的MIME类型\nmultiple 可以一次上传多个文件\nrequired "},"objectClass":"NSArray"},"text":"8. 用input 上传文件\n最后一种input元素类型是file型，它可以在提交表单时将文件上传到服务器。"},"objectClass":"NSArray"},"text":"定制input元素\n要配置input元素需要用到其type属性。在HTML5中该属性有23个不同的值。"},"9":{"objectClass":"MindNode","ID":"4O545","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"0FX84","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"8CJ35","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"68BP2","lineColorHex":"#37C45A","text":"该元素的name、disabled、form、autofocus和required属性与input元素的同名属性类似。size属性用来设定要显示给用户的选项数目。元素如果设置了multiple属性的话，那么用户就能一次选择多个选项。"},"1":{"objectClass":"MindNode","ID":"851EN","lineColorHex":"#37C45A","text":"optgroup元素可以用来在select元素的内容中建立一定的结构。该元素的用途是对option元素进行编组。其label属性可用来为整组选项提供一个小标题，而disabled属性则可用来阻止选择组内的任何选项。"},"objectClass":"NSArray"},"text":"1.生成选项列表\nselect元素可以用来生成一个选项列表供用户选择。提供给用户的选项由option元素定义。"},"1":{"objectClass":"MindNode","ID":"13QY6","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"FIOUP","lineColorHex":"#37C45A","text":"textarea元素的rows和cols属性可用来设置其大小。wrap属性有两个值：hard和soft，可用来控制在用户输入的文字中插入换行符的方式。"},"objectClass":"NSArray"},"text":"2.输入多行文字\ntextarea元素生成的是多行文本框，用户可以在里面输入多行文字。"},"2":{"objectClass":"MindNode","ID":"7FK5E","lineColorHex":"#37C45A","text":"3.表示计算结果\noutput元素表示计算的结果。"},"objectClass":"NSArray"},"text":"1.使用其他表单元素"},"1":{"objectClass":"MindNode","ID":"A0G12","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"TEP5Z","lineColorHex":"#37C45A","text":"1.确保用户输入了一个值\nrequired属性"},"1":{"objectClass":"MindNode","ID":"6W47Q","lineColorHex":"#37C45A","text":"2. 确保输入值位于某个范围内\nmin和max属性可以用来确保输入的数值和日期数据处于指定的范围内。"},"objectClass":"NSArray"},"text":"2. 使用输入验证"},"2":{"objectClass":"MindNode","ID":"6N6M9","lineColorHex":"#37C45A","text":"3. 确保输入值与指定模式匹配 \npattern属性可以用来确保输入值与一个正则表达式匹配。"},"objectClass":"NSArray"},"text":"其他表单元素及输入验证"},"10":{"objectClass":"MindNode","ID":"6L780","lineColorHex":"#1BD6E7","text":"嵌入内容"},"11":{"objectClass":"MindNode","ID":"4RQ27","lineColorHex":"#1BD6E7","children":{"0":{"objectClass":"MindNode","ID":"85KUI","lineColorHex":"#1BD6E7","children":{"0":{"objectClass":"MindNode","ID":"832Q7","lineColorHex":"#1BD6E7","children":{"0":{"objectClass":"MindNode","ID":"42892","lineColorHex":"#1BD6E7","text":"Ajax的关键在于XMLHttpRequest对象，所有现代浏览器均支持 XMLHttpRequest 对象（IE5 和 IE6 使用 ActiveXObject）。"},"1":{"objectClass":"MindNode","ID":"6A7VG","lineColorHex":"#1BD6E7","text":"第一步是创建一个新的XMLHttpRequest对象。\n通过new XMLHttpRequest()构造函数创建."},"2":{"objectClass":"MindNode","ID":"4RG4O","lineColorHex":"#1BD6E7","text":"下一步是给readystatechange事件设置一个事件处理器。这个事件会在请求过程中被多次触发，向你提供事情的进展情况。"},"3":{"objectClass":"MindNode","ID":"3BY0N","lineColorHex":"#1BD6E7","text":"第三步通过XMLHttpRequest对象使用open()方法指定HTTP方法（在这里是GET）和需要请求的URL。"},"4":{"objectClass":"MindNode","ID":"03DMT","lineColorHex":"#1BD6E7","text":"最后通过send方法发送请求。"},"objectClass":"NSArray"},"text":"1.发送请求"},"1":{"objectClass":"MindNode","ID":"11Y5J","lineColorHex":"#1BD6E7","children":{"0":{"objectClass":"MindNode","ID":"1Q6YN","lineColorHex":"#1BD6E7","text":"创建的XMLHttpRequest对象都会有几个常见属性，首先onreadystatechange，存储函数（或函数名），每当readyState的属性改变时，就会调用该函数。"},"1":{"objectClass":"MindNode","ID":"24Z39","lineColorHex":"#1BD6E7","children":{"0":{"objectClass":"MindNode","ID":"25051","lineColorHex":"#1BD6E7","text":"存有的XMLHttpRequest的状态从0到4发生变化。\n0：请求未初始化\n1：服务器连接已建立\n2：请求已接收\n3：请求处理中\n4：请求已完成，且响应已就绪"},"objectClass":"NSArray"},"text":"readyState属性："},"2":{"objectClass":"MindNode","ID":"6U857","lineColorHex":"#1BD6E7","text":"status属性"},"3":{"objectClass":"MindNode","ID":"BGL54","lineColorHex":"#1BD6E7","text":"reponseText、responseXML"},"objectClass":"NSArray"},"text":"2. 处理响应"},"objectClass":"NSArray"},"text":"1.Ajax起步"},"objectClass":"NSArray"},"text":"使用Ajax"},"12":{"objectClass":"MindNode","ID":"3KHHQ","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"OAUJX","lineColorHex":"#DC306C","text":"HTML5支持直接在浏览器中播放音频和视频文件，不需要使用Adobe Flash这样的插件。"},"1":{"objectClass":"MindNode","ID":"7C40P","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"61AG3","lineColorHex":"#DC306C","text":"一些普通属性：\nautoplay 如果存在此属性使浏览器立刻开始播放视频\ncontrols 决定是否显示播放控件\nloop 循环播放\nmuted 静音"},"1":{"objectClass":"MindNode","ID":"17SS7","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"26XKB","lineColorHex":"#DC306C","text":"取值：\nnone 不会提前载入视频\nmetadata 只会提前载入视频的元数据（宽高、第一帧\nauto 请求浏览器尽快下载整个视频，默认行为。"},"objectClass":"NSArray"},"text":"预先加载视频\npreload属性告诉浏览器：当它加载完包含video元素的网页后，是否应该积极地去下载视频。"},"2":{"objectClass":"MindNode","ID":"V4R0R","lineColorHex":"#DC306C","text":"显示占位图像\nposter属性向用户呈现一张占位图像。这张图像会显示在视频的位置，直至用户开始播放。"},"3":{"objectClass":"MindNode","ID":"Y726A","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"NLQE4","lineColorHex":"#DC306C","text":"如果省略width和height属性，浏览器就会显示一个很小的占位元素，并在元数据可用时（也就是当用户开始播放，或者preload属性被设为metadata时）把它调整到视频原始尺寸的大小。"},"objectClass":"NSArray"},"text":"设置视频尺寸"},"4":{"objectClass":"MindNode","ID":"C4ME2","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"PU3X2","lineColorHex":"#DC306C","text":"指定视频最简单的方式是使用src属性，并提供所需视频文件的URL。"},"objectClass":"NSArray"},"text":"指定视频来源（和格式）"},"objectClass":"NSArray"},"text":"1. 使用video元素\n可以用video元素在网页里嵌入视频内容。"},"2":{"objectClass":"MindNode","ID":"C3VRP","lineColorHex":"#DC306C","text":""},"objectClass":"NSArray"},"text":"使用多媒体"},"13":{"objectClass":"MindNode","ID":"J3587","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"H2601","lineColorHex":"#BF58F5","text":"1, 使用canvas元素\ncanvas元素非常简单，这是指它所有的功能都体现在一个JavaScript对象上，因此该元素本身只有两个属性height和width。canvas元素里的内容会在浏览器不支持此元素时作为备用内容显示。"},"1":{"objectClass":"MindNode","ID":"261D2","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"AG5U0","lineColorHex":"#BF58F5","text":"let ctx = document.getElementById('canvas').getContext('2d');"},"objectClass":"NSArray"},"text":"2. 获取画布上下文\n关键的方法是getContext。通过获取到canvas元素对象，然后再调用该方法。"},"2":{"objectClass":"MindNode","ID":"7898G","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"34YD8","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"J01M2","lineColorHex":"#BF58F5","text":"所有这三个方法都需要四个参数。前两个（如表格所示的x和y）是从canvas元素左上角算起的偏移量。w和h参数指定了待绘制矩形的宽度和高度。"},"objectClass":"NSArray"},"text":"clearRect方法会清除指定矩形里已绘制的所有内容。\nfillRect和strokeRect方法来创建一系列实心和空心的矩形。"},"objectClass":"NSArray"},"text":"3. 绘制矩形\n所有绘制方法，都要用在上下文对象上（而不是画布本身）。。2D上下文的坐标原点(0, 0)在<canvas>元素的左上角。所有坐标值都相对于该点计算，因此x坐标向右增长，y坐标向下增长。"},"3":{"objectClass":"MindNode","ID":"49L47","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"8NU0E","lineColorHex":"#BF58F5","text":"1. lineWidth属性，此属性是绘制状态的一部分，负责设置用于图形（比如strokeRect方法生成的那些）的线条宽度。"},"1":{"objectClass":"MindNode","ID":"6V2Y2","lineColorHex":"#BF58F5","text":"2. 设置线条连接样式\nlineJoin属性决定了相互连接的线条应该如何绘制，它有三个值：round、bevel和miter，默认值是miter。"},"2":{"objectClass":"MindNode","ID":"VY4GT","lineColorHex":"#BF58F5","text":"3. 设置填充和笔触样式\n当用fillStyle或strokeStyle属性设置样式时，可以用第4章介绍的CSS颜色值来指定一种颜色，名称或颜色模型都可以。"},"3":{"objectClass":"MindNode","ID":"P24FX","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"G5MR9","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"U01D1","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"R29WV","lineColorHex":"#BF58F5","text":"注意！createLinearGradient的值代表画布里的一组坐标，而fillRect的值代表了矩形相对于单个坐标点的宽度和高度。"},"objectClass":"NSArray"},"text":"let grad = ctx.createLinearGradient(0,0,500,140);\n    grad.addColorStop(0,'red')\n    grad.addColorStop(0.5,'white')\n    grad.addColorStop(1,'black')"},"objectClass":"NSArray"},"text":"1、线性渐变\n四个值分别代表左上角和右下角。我们可以在createLinearGradient方法返回的CanvasGradient对象上使用addColorStop方法，沿着梯度线添加各种颜色，addColorStop方法的第一个参数是我们想要在线段上应用颜色的位置，颜色则由第二个参数指定。0代表开始，1代表结束。\n\n定义渐变并添加颜色点之后，就可以用CanvasGradient对象来设置fillStyle或strokeStyle属性了"},"1":{"objectClass":"MindNode","ID":"FB9I9","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"21Y1B","lineColorHex":"#BF58F5","text":"这六个参数分别代表着：\n第一第二值代表起点园的圆心坐标。第三个值代表起点园半径。第四五个值代表终点园的圆心坐标，第六个代表终点园的半径。"},"objectClass":"NSArray"},"text":"2. 径向渐变\n我们用两个圆定义径向渐变。渐变的起点由第一个圆定义，终点则是第二个圆，在两者之间添加颜色点。"},"objectClass":"NSArray"},"text":"4. 使用渐变\ncanvas元素支持两类渐变：线性和径向。对应两种方法，createLinearGradient(x0,y0,x1,y1)\ncreateRadialGradient(x0,y0,r0,x1,y1,r1)\n都返回一个Canvas Gradient对象。"},"4":{"objectClass":"MindNode","ID":"N163J","lineColorHex":"#BF58F5","text":"5. 使用图案\n除了纯色和渐变之外，我们还可以创建图案（pattern）。具体做法是使用画布上下文对象所定义的createPattern方法。"},"objectClass":"NSArray"},"text":"4. 设置画布绘制状态\n绘制状态是一组属性，指定了从线条宽度到填充色的所有参数。"},"4":{"objectClass":"MindNode","ID":"564EN","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"1RM68","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"Y4IQ2","lineColorHex":"#BF58F5","text":"画布里的内容不会被保存或恢复，只有绘制状态的属性值才会。它们包括我们在这一章里见过的属性，如lineWidth、fillStyle和strokeStyle。"},"objectClass":"NSArray"},"text":"save（）保存绘制状态属性的值存入状态栈，restore（）取出状态栈的第一个值。绘制状态保存时会被存放在一个后进先出（LIFO）的栈中，意思是我们用save方法最后保存的状态会被restore方法首先进行恢复。"},"objectClass":"NSArray"},"text":"5. 保存和恢复绘制状态"},"objectClass":"NSArray"},"text":"使用canvas元素"},"14":{"objectClass":"MindNode","ID":"I6E1I","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"6O7GJ","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"R7D8K","lineColorHex":"#26BBFF","text":"基本路径方法：\nbeginPath（） 开始一条新的路径\nmoveTo（） 移动到指定坐标不开始绘制子路径\nlineTo（） 绘制一条到指定坐标的子路径\nclosePath（） 闭合现有路径，绘制一条线连接终点与初始坐标。\nfill（） 用fillStyle属性填充子路径描述的图形\nstroke（）用strokeStyle属性描述子路径图形绘制的轮廓线"},"1":{"objectClass":"MindNode","ID":"W7170","lineColorHex":"#26BBFF","text":"lineCap属性\n我们在绘制线条或未闭合图形时可以使用lineCap属性来设置线条末端的样式。这个属性允许的三个值是：butt、round和square（butt为默认值）。前提是必须调用stroke（）方法。"},"2":{"objectClass":"MindNode","ID":"J9091","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"8V899","lineColorHex":"#26BBFF","text":"接收四个参数，前两个表示其左上角位于（x,y）后两个参数是宽高。"},"objectClass":"NSArray"},"text":"绘制矩形\nrect方法会给当前路径添加一条矩形的子路径。如果只需要一个单独的矩形，那么第35章介绍过的fillRect和strokeRect方法是更合适的选择。"},"objectClass":"NSArray"},"text":"1.用路劲绘图\n路径本质上是一组独立的线条（被称为子路径），它们组合到一起构成图形。我们绘制子路径的方式就像用笔在纸上画图一样，笔尖不离开纸面：画布上的每一条子路径都以上一条的终点作为起点。"},"1":{"objectClass":"MindNode","ID":"303QO","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"L3753","lineColorHex":"#26BBFF","text":"1. 使用arcTo方法\n接收五个参数，arcTo（x1,y1,x2,y2,rad）\n绘制一段半径为rad，经过(x1,y1)直到(x2,yy2)的圆弧。\n\n使用这个方法可以得到一条匀称的曲线。半径和线条长度并不总是具有如此方便的尺寸，所以canvas会根据需要调整所绘制的圆弧。","maxWidthLine":307,"style2":{"objectClass":"NSDictionary","bold":0}},"1":{"objectClass":"MindNode","ID":"513P3","lineColorHex":"#26BBFF","text":"2. 使用arc方法\n用前两个方法参数在画布上指定一个点。用第三个参数指定圆弧的半径，然后指定圆弧的起始和结束角度。最后一个参数指定绘制圆弧时是按顺时针还是逆时针方向。"},"objectClass":"NSArray"},"text":"2. 绘制圆弧\n我们使用arc和arcTo方法在画布上绘制圆弧，不过这两种方法绘制圆弧的方式有所不同。"},"2":{"objectClass":"MindNode","ID":"6S503","lineColorHex":"#26BBFF","text":"3. 绘制贝塞尔曲线","markType":5},"3":{"objectClass":"MindNode","ID":"J0W81","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"1N8KM","lineColorHex":"#26BBFF","text":"可以用stroke和fill方法来绘制或填充一条路径。还有另一种方式可以做到这一点就是clip()方法。\n\n一旦定义了一块裁剪区域，就只有区域内的路径才会显示到屏幕上了。"},"objectClass":"NSArray"},"text":"4.创建剪辑区域"},"4":{"objectClass":"MindNode","ID":"7X1JI","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"DIJKY","lineColorHex":"#26BBFF","text":"两个方法：\nfillText(<text>,x,y,width) :在x，y位置上绘制并填充指定文本，设置了宽度上线。\nstrokeText()同上一样。"},"1":{"objectClass":"MindNode","ID":"25YZY","lineColorHex":"#26BBFF","text":"绘制属性：\nfont 设置绘制文本时使用的字体\ntextAlign 设置文本的对齐方式"},"objectClass":"NSArray"},"text":"5. 绘制文本"},"5":{"objectClass":"MindNode","ID":"53138","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"8K839","lineColorHex":"#26BBFF","text":"1、 阴影\n可以用四种绘制状态属性来给我们在画布上绘制的图形和文本添加阴影。\nshadowblur 设置阴影的模糊程度\nshadowColor 设置阴影颜色\nshadowOffsetX 设置阴影的水平偏移量\nshadowOffsetY 设置阴影的垂直偏移量"},"1":{"objectClass":"MindNode","ID":"RUC6M","lineColorHex":"#26BBFF","text":"2、 使用透明度\n第一种是用第4章介绍的rgba函数（而不是rgb）指定一个fillStyle或strokeStyle值。还可以使用绘制状态属性globalAlpha，它应用的透明度是全局性的"},"objectClass":"NSArray"},"text":"6. 使用特效和变换"},"objectClass":"NSArray"},"text":"使用canvas元素2"},"15":{"objectClass":"MindNode","ID":"Z9M9F","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"3938R","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"639O8","lineColorHex":"#37C45A","text":"处理拖动事件\n这些事件有的针对被拖动的元素，有的针对可能的释放区。\ndragstart 在元素开始拖动时触发\ndrag 在元素被拖动时反复触发\ndragend 拖动完成时触发"},"objectClass":"NSArray"},"text":"1. 创建来源项目\n通过draggable属性告诉浏览器文档里的哪些元素可以被拖动。有三个值可选，true、false、auto。默认值是auto把决定权交给浏览器。倾向于显示的设置draggable为true。"},"1":{"objectClass":"MindNode","ID":"M51H5","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"4A6L7","lineColorHex":"#37C45A","text":"dragenter 当被拖动元素进入释放区时触发\ndragover 当被拖动元素在释放区移动时触发\ndragleave 当被拖动元素没有放下就离开释放区时触发\ndrop 被拖动元素在释放区放下触发"},"1":{"objectClass":"MindNode","ID":"5SI36","lineColorHex":"#37C45A","text":"dragenter和dragover事件的默认行为是拒绝接受任何被拖放的项目，因此我们必须要做的最重要的事就是防止这种默认行为被执行。"},"2":{"objectClass":"MindNode","ID":"G9G22","lineColorHex":"#37C45A","text":"拖放功能的规范告诉我们还必须给想要成为释放区的元素应用dropzone属性，而且此属性的值应当包含我们愿意接受的操作与数据类型细节。"},"objectClass":"NSArray"},"text":"2. 创建释放区\n要让某个元素成为释放区，我们需要处理dragenter和dragover事件。它们是针对释放区的其中两个事件。"},"2":{"objectClass":"MindNode","ID":"2S1K9","lineColorHex":"#37C45A","text":"3. 使用DataTransfer对象"},"objectClass":"NSArray"},"text":"使用拖放"},"16":{"objectClass":"MindNode","ID":"2NSM0","lineColorHex":"#1BD6E7","children":{"0":{"objectClass":"MindNode","ID":"86PEH","lineColorHex":"#1BD6E7","text":"地理定位（Geolocation）API让我们可以获取关于用户当前地理位置的信息（或者至少是正在运行浏览器的系统的位置）。"},"1":{"objectClass":"MindNode","ID":"X12K5","lineColorHex":"#1BD6E7","children":{"0":{"objectClass":"MindNode","ID":"FD9B3","lineColorHex":"#1BD6E7","text":"Geolocation对象有几个方法：\ngetCurrentPosition（callback，errorcallback,options）\nwatchPosition(callback,error,options)开始监控当前位置\nclear Watch（id）停止监控"},"1":{"objectClass":"MindNode","ID":"1F613","lineColorHex":"#1BD6E7","children":{"0":{"objectClass":"MindNode","ID":"B541Y","lineColorHex":"#1BD6E7","text":"position对象有两个属性，coords 返回当前坐标对象Coordinates。 timestamp返回获取坐标的时间。"},"1":{"objectClass":"MindNode","ID":"AYNSH","lineColorHex":"#1BD6E7","text":"position.coords 返回的Coordinates对象，有多个关于坐标的属性，不一一列举了。"},"objectClass":"NSArray"},"text":"当调用getCurrentPosition方法，传递一个回调函数时，当位置信息变得可用时，浏览器就会调用指定回调函数，并传入一个提供位置详情的Position对象。"},"objectClass":"NSArray"},"text":"1. 使用地理定位\n我们通过全局属性navigator.geolocation访问地理定位功能，它会返回一个Geolocation对象。"},"2":{"objectClass":"MindNode","ID":"2TW71","lineColorHex":"#1BD6E7","children":{"0":{"objectClass":"MindNode","ID":"E669T","lineColorHex":"#1BD6E7","children":{"0":{"objectClass":"MindNode","ID":"RNYT2","lineColorHex":"#1BD6E7","text":"PositionError对象有两个属性值，code和message 返回错误的提示。"},"objectClass":"NSArray"},"text":"我们可以给getCurrentPosition方法提供第二个参数，它让我们可以指定一个函数，在获取位置发生错误时调用它。此函数会获得一个PositionError对象。"},"objectClass":"NSArray"},"text":"2. 处理地理定位错误"},"3":{"objectClass":"MindNode","ID":"37X1E","lineColorHex":"#1BD6E7","children":{"0":{"objectClass":"MindNode","ID":"8N1E6","lineColorHex":"#1BD6E7","children":{"0":{"objectClass":"MindNode","ID":"7S161","lineColorHex":"#1BD6E7","text":"三个属性：\nenableHighAccuracy 希望得到最佳结果\ntimeout 设置请求位置时间\nmaximumAge 告诉浏览器可以缓存位置信息，在我们指定的时间之前。"},"objectClass":"NSArray"},"text":"我们可以给getCurrentPosition方法提供的第三个参数是一个PositionOptions对象。这个功能允许我们可以部分控制位置信息的获取方式。"},"objectClass":"NSArray"},"text":"3. 指定地理定位选项"},"4":{"objectClass":"MindNode","ID":"Q0MNC","lineColorHex":"#1BD6E7","children":{"0":{"objectClass":"MindNode","ID":"11BRD","lineColorHex":"#1BD6E7","text":"可以用watchPosition方法不断获得关于位置的更新。这个方法所需的参数和getCurrentPosition方法相同，工作方式也一样。它们的区别在于：随着位置发生改变，回调函数会被反复地调用。"},"objectClass":"NSArray"},"text":"4. 监控位置"},"objectClass":"NSArray"},"text":"使用地理定位"},"17":{"objectClass":"MindNode","ID":"2F05Y","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"RTOB1","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"21D89","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"92EB7","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"65QL3","lineColorHex":"#FFC700","text":"浏览器不会删除我们用localStorage对象添加的数据，除非用户自己清除浏览数据。"},"objectClass":"NSArray"},"text":"其中键和值都是字符串。键必须是唯一的，这就意味着如果我们用Storage对象里已经存在的键调用setItem方法，就会更新它的值。"},"objectClass":"NSArray"},"text":"我们可以通过全局属性localStorage访问本地存储功能。这个属性会返回一个Storage对象。Storage对象被用来保存键/值形式的字符串对。"},"objectClass":"NSArray"},"text":"使用本地存储"},"1":{"objectClass":"MindNode","ID":"0YR2H","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"40Q6X","lineColorHex":"#FFC700","text":"会话存储（session storage）的工作方式和本地存储很接近，不同之处在于数据是各个浏览上下文私有的，会在文档被关闭时移除。我们通过全局变量sessionStorage访问会话存储，它会返回一个Storage对象"},"objectClass":"NSArray"},"text":"使用会话存储"},"objectClass":"NSArray"},"text":"Web存储"},"18":{"objectClass":"MindNode","ID":"48G46","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"TD8R2","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"5533C","lineColorHex":"#DC306C","text":"data-* 属性用于存储私有页面后应用的自定义数据。\n\ndata-* 属性可以在所有的 HTML 元素中嵌入数据。\n\n自定义的数据可以让页面拥有更好的交互体验（不需要使用 Ajax 或去服务端查询数据）。"},"objectClass":"NSArray"},"text":"html5 data- 属性\n使用 data-* 属性来嵌入自定义数据"},"objectClass":"NSArray"},"text":"知识补充"},"objectClass":"NSArray"},"text":"html以及html5新增"},"ID":"9SH3F","style":100}